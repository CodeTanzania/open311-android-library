Index: majifix311/src/main/java/com/example/majifix311/LocationPickerDialog.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- majifix311/src/main/java/com/example/majifix311/LocationPickerDialog.java	(revision )
+++ majifix311/src/main/java/com/example/majifix311/LocationPickerDialog.java	(revision )
@@ -0,0 +1,186 @@
+package com.example.majifix311;
+
+import android.app.Dialog;
+import android.app.DialogFragment;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.location.Location;
+import android.os.Bundle;
+import android.support.annotation.IdRes;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.support.v7.app.AlertDialog;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ProgressBar;
+import android.widget.RadioButton;
+import android.widget.RadioGroup;
+import android.widget.Spinner;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import com.example.majifix311.location.LocationTracker;
+
+/**
+ * This is used to find current location.
+ */
+
+public class LocationPickerDialog extends DialogFragment implements LocationTracker.LocationListener {
+    private int STATE_SELECT = 0;
+    private int STATE_LOADING = 1;
+    private int STATE_VERIFY = 2;
+
+    private int mSelected = 0;
+    private LocationTracker mLocationTracker;
+
+    private RadioGroup group;
+    private RadioButton locationCurrent;
+    private RadioButton locationCustom;
+    private ProgressBar spinner;
+    private TextView address;
+    private TextView gpspoints;
+
+    @Override
+    public Dialog onCreateDialog(Bundle savedInstanceState) {
+        String[] options = {"Use current location", "Select custom location"};
+
+        LayoutInflater inflater = getActivity().getLayoutInflater();
+        View view = inflater.inflate(R.layout.dialog_location_selector, null);
+
+        spinner = (ProgressBar) view.findViewById(R.id.waiting_for_location);
+        group = (RadioGroup) view.findViewById(R.id.location_options);
+        locationCurrent = (RadioButton) view.findViewById(R.id.location_current);
+        locationCustom = (RadioButton) view.findViewById(R.id.location_custom);
+        gpspoints = (TextView) view.findViewById(R.id.gps);
+        address = (TextView) view.findViewById(R.id.address);
+
+        group.getCheckedRadioButtonId();
+        group.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {
+            @Override
+            public void onCheckedChanged(RadioGroup group, @IdRes int checkedId) {
+                if (checkedId == R.id.location_current) {
+                    mLocationTracker = new LocationTracker(getActivity());
+                    mLocationTracker.start(LocationPickerDialog.this);
+                    spinner.setVisibility(View.VISIBLE);
+                }
+            }
+        });
+
+        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
+        builder.setTitle(R.string.hint_location)
+//                .setSingleChoiceItems(options, 0, new DialogInterface.OnClickListener() {
+//                    @Override
+//                    public void onClick(DialogInterface dialog, int which) {
+//                        System.out.println("Is selected: "+which);
+//                        mSelected = which;
+//                        mLocationTracker = new LocationTracker(getActivity());
+//                        mLocationTracker.start(LocationPickerDialog.this);
+//                    }
+//                })
+                .setView(view)
+                .setPositiveButton(R.string.action_select, new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialog, int which) {
+                        System.out.println("Category selected: "+group.getCheckedRadioButtonId());
+                        onCreateDialog(null);
+
+
+//                        if (mSelected == 0) {
+                            // get current location
+//                            mLocationTracker = new LocationTracker(getActivity());
+//                            mLocationTracker.start(LocationPickerDialog.this);
+//                        } else {
+                            // show select location fragment
+//                        }
+                    }
+//                })
+//                .setNegativeButton(R.string.action_close, new DialogInterface.OnClickListener() {
+//                    @Override
+//                    public void onClick(DialogInterface dialog, int which) {
+//                        System.out.println("Dialog canceled");
+//                        dismiss();
+//                    }
+                });
+
+        AlertDialog dialog = builder.create();
+//        group.setOnClickListener(new View.OnClickListener() {
+//            @Override
+//            public void onClick(View v) {
+//                mLocationTracker = new LocationTracker(getActivity());
+//                mLocationTracker.start(LocationPickerDialog.this);
+//                spinner.setVisibility(View.VISIBLE);
+//            }
+//        });
+
+        return dialog;
+    }
+
+    @Nullable
+    @Override
+    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, Bundle savedInstanceState) {
+        return super.onCreateView(inflater, container, savedInstanceState);
+//        group = (RadioGroup) view.findViewById(R.id.location_options);
+//        group.setOnClickListener(new View.OnClickListener() {
+//            @Override
+//            public void onClick(View v) {
+//                if (v.getId() == R.id.location_current) {
+//                    mLocationTracker = new LocationTracker(getActivity());
+//                    mLocationTracker.start(LocationPickerDialog.this);
+//                    group.setVisibility(View.GONE);
+//                    spinner.setVisibility(View.VISIBLE);
+//                }
+//                else if (v.getId() == R.id.location_custom) {
+//                    // start SelectLocationFragment
+//                }
+//            }
+//        });
+//        spinner = (Spinner) view.findViewById(R.id.waiting_for_location);
+//        address = (TextView) view.findViewById(R.id.address);
+//        gpspoints = (TextView) view.findViewById(R.id.gps);
+//
+//        return view;
+    }
+
+    // This ensures that GPS is turned on correctly
+    @Override
+    public void onActivityResult(int requestCode, int resultCode, Intent data) {
+        super.onActivityResult(requestCode, resultCode, data);
+        if (mLocationTracker != null) {
+            mLocationTracker.respondToActivityResult(requestCode, resultCode);
+        }
+    }
+
+    // This ensures that permission callbacks are handled correctly
+    @Override
+    public void onRequestPermissionsResult(int requestCode, @NonNull String permissions[], @NonNull int[] grantResults) {
+        if (mLocationTracker != null) {
+            mLocationTracker.respondToPermissions(requestCode, grantResults);
+        }
+    }
+
+    @Override
+    public String getPermissionAlertTitle() {
+        return "GPS Point is necessary to help DAWASCO find the problem.";
+    }
+
+    @Override
+    public String getPermissionAlertDescription() {
+        return "Please allow the app to enable GPS.";
+    }
+
+    @Override
+    public void onLocationChanged(Location location) {
+        System.out.println("Location found! "+location);
+        spinner.setVisibility(View.GONE);
+        gpspoints.setText(location.getLatitude()+", "+location.getLongitude());
+        gpspoints.setVisibility(View.VISIBLE);
+    }
+
+    @Override
+    public void onPermissionDenied() {
+        Toast.makeText(getActivity(), "You will be unable to submit an issue until GPS is enabled",
+                Toast.LENGTH_LONG).show();
+        dismiss();
+    }
+}
Index: majifix311/src/main/java/com/example/majifix311/ui/BasicActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- majifix311/src/main/java/com/example/majifix311/ui/BasicActivity.java	(revision )
+++ majifix311/src/main/java/com/example/majifix311/ui/BasicActivity.java	(revision )
@@ -0,0 +1,19 @@
+package com.example.majifix311.ui;
+
+import android.os.Bundle;
+import android.os.PersistableBundle;
+import android.support.annotation.Nullable;
+import android.support.v4.app.FragmentActivity;
+
+/**
+ * This hosts fragments.
+ */
+
+public class BasicActivity extends FragmentActivity {
+
+    @Override
+    public void onCreate(@Nullable Bundle savedInstanceState, @Nullable PersistableBundle persistentState) {
+        super.onCreate(savedInstanceState, persistentState);
+        savedInstanceState.get(FRAG_RES);
+    }
+}
Index: majifix311/src/main/res/layout/activity_reporting_form.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- majifix311/src/main/res/layout/activity_reporting_form.xml	(date 1505658913000)
+++ majifix311/src/main/res/layout/activity_reporting_form.xml	(revision )
@@ -1,173 +1,179 @@
 <?xml version="1.0" encoding="utf-8"?>
+<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    xmlns:app="http://schemas.android.com/apk/res-auto"
+    <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+        xmlns:app="http://schemas.android.com/apk/res-auto"
-    android:orientation="vertical"
-    android:layout_width="match_parent"
-    android:layout_height="match_parent"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:orientation="vertical"
-    android:padding="30dp">
+        android:padding="30dp">
 
-    <!-- full name -->
-    <android.support.design.widget.TextInputLayout
-        android:id="@+id/til_name"
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content"
+        <!-- full name -->
+        <android.support.design.widget.TextInputLayout
+            android:id="@+id/til_name"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
-        app:errorEnabled="true" >
+            app:errorEnabled="true">
 
-        <android.support.design.widget.TextInputEditText
-            android:id="@+id/et_name"
-            android:layout_width="match_parent"
-            android:layout_height="wrap_content"
+            <android.support.design.widget.TextInputEditText
+                android:id="@+id/et_name"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
-            android:maxLines="1"
-            android:singleLine="true"
+                android:hint="@string/hint_name"
-            android:imeOptions="actionNext"
+                android:imeOptions="actionNext"
+                android:maxLines="1"
-            android:nextFocusDown="@+id/et_phoneNumber"
-            android:nextFocusForward="@id/et_phoneNumber"
+                android:nextFocusDown="@+id/et_phoneNumber"
+                android:nextFocusForward="@id/et_phoneNumber"
-            android:hint="@string/hint_name">
+                android:singleLine="true">
+
-            <requestFocus />
-        </android.support.design.widget.TextInputEditText>
-    </android.support.design.widget.TextInputLayout>
+                <requestFocus />
+            </android.support.design.widget.TextInputEditText>
+        </android.support.design.widget.TextInputLayout>
 
-    <!-- Phone number -->
-    <android.support.design.widget.TextInputLayout
-        android:id="@+id/til_phone"
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content">
+        <!-- Phone number -->
+        <android.support.design.widget.TextInputLayout
+            android:id="@+id/til_phone"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content">
 
-        <android.support.design.widget.TextInputEditText
-            android:id="@+id/et_phone"
-            android:layout_width="match_parent"
-            android:layout_height="wrap_content"
+            <android.support.design.widget.TextInputEditText
+                android:id="@+id/et_phone"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
-            android:inputType="number"
+                android:hint="@string/hint_phone"
-            android:imeOptions="actionNext"
+                android:imeOptions="actionNext"
+                android:inputType="number"
-            android:nextFocusDown="@+id/et_category"
+                android:nextFocusDown="@+id/et_category"
-            android:nextFocusForward="@id/et_category"
-            android:hint="@string/hint_phone"/>
+                android:nextFocusForward="@id/et_category" />
-    </android.support.design.widget.TextInputLayout>
+        </android.support.design.widget.TextInputLayout>
 
-     <!--Category -->
-    <android.support.design.widget.TextInputLayout
-        android:id="@+id/til_category"
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content">
+        <!--Category -->
+        <android.support.design.widget.TextInputLayout
+            android:id="@+id/til_category"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content">
 
-        <android.support.design.widget.TextInputEditText
-            android:id="@+id/et_category"
-            android:layout_width="match_parent"
-            android:layout_height="wrap_content"
+            <android.support.design.widget.TextInputEditText
+                android:id="@+id/et_category"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
-            android:maxLines="1"
-            android:inputType="none"
-            android:singleLine="true"
+                android:hint="@string/hint_category"
-            android:imeOptions="actionNext"
+                android:imeOptions="actionNext"
+                android:inputType="none"
+                android:maxLines="1"
-            android:nextFocusDown="@+id/et_address"
-            android:nextFocusForward="@id/et_address"
+                android:nextFocusDown="@+id/et_address"
+                android:nextFocusForward="@id/et_address"
-            android:hint="@string/hint_category"/>
+                android:singleLine="true" />
-    </android.support.design.widget.TextInputLayout>
+        </android.support.design.widget.TextInputLayout>
 
-    <!--<Spinner-->
+        <!--<Spinner-->
         <!--android:id="@+id/spnr_category"-->
         <!--android:layout_width="match_parent"-->
         <!--android:layout_height="wrap_content" />-->
 
-    <LinearLayout
+        <LinearLayout
-        android:baselineAligned="false"
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:baselineAligned="false"
-        android:orientation="horizontal">
+            android:orientation="horizontal">
 
-        <!-- Location -->
-        <LinearLayout
-            android:id="@+id/ll_add_location"
+            <!-- Location -->
+            <LinearLayout
+                android:id="@+id/ll_add_location"
-            android:layout_height="wrap_content"
-            android:layout_width="0dp"
+                android:layout_width="0dp"
-            android:layout_weight="1"
-            android:orientation="vertical"
+                android:layout_height="wrap_content"
-            android:layout_gravity="center"
+                android:layout_gravity="center"
-            android:gravity="center">
+                android:layout_weight="1"
+                android:gravity="center"
+                android:orientation="vertical">
 
-            <ImageView
-                android:id="@+id/iv_location"
+                <ImageView
+                    android:id="@+id/iv_location"
-                android:contentDescription="@string/content_desc_map"
-                android:src="@drawable/ic_add_location_black"
-                android:layout_width="@dimen/form_icon"
+                    android:layout_width="@dimen/form_icon"
-                android:layout_height="@dimen/form_icon" />
+                    android:layout_height="@dimen/form_icon"
+                    android:contentDescription="@string/content_desc_map"
+                    android:src="@drawable/ic_add_location_black" />
 
-            <TextView
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
+                <TextView
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
-                android:text="@string/hint_location"/>
+                    android:text="@string/hint_location" />
 
-            <TextView
-                android:id="@+id/tv_location_error"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
+                <TextView
+                    android:id="@+id/tv_location_error"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
-                android:visibility="invisible"
+                    android:text="@string/required"
-                android:textColor="@color/error"
+                    android:textColor="@color/error"
-                android:text="@string/required"/>
+                    android:visibility="invisible" />
 
-        </LinearLayout>
+            </LinearLayout>
 
-        <!-- Photo -->
-        <LinearLayout
-            android:id="@+id/ll_add_photo"
+            <!-- Photo -->
+            <LinearLayout
+                android:id="@+id/ll_add_photo"
-            android:layout_height="wrap_content"
-            android:layout_width="0dp"
+                android:layout_width="0dp"
-            android:layout_weight="1"
-            android:orientation="vertical"
+                android:layout_height="wrap_content"
-            android:layout_gravity="center"
+                android:layout_gravity="center"
-            android:gravity="center">
+                android:layout_weight="1"
+                android:gravity="center"
+                android:orientation="vertical">
 
-            <ImageView
+                <ImageView
-                android:src="@drawable/ic_add_photo_black"
-                android:contentDescription="@string/content_desc_photo"
-                android:layout_width="@dimen/form_icon"
+                    android:layout_width="@dimen/form_icon"
-                android:layout_height="@dimen/form_icon" />
+                    android:layout_height="@dimen/form_icon"
+                    android:contentDescription="@string/content_desc_photo"
+                    android:src="@drawable/ic_add_photo_black" />
 
-            <TextView
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
+                <TextView
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
-                android:text="@string/hint_photo"/>
+                    android:text="@string/hint_photo" />
 
-        </LinearLayout>
+            </LinearLayout>
 
-    </LinearLayout>
+        </LinearLayout>
 
-    <!-- Address -->
-    <android.support.design.widget.TextInputLayout
-        android:id="@+id/til_address"
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content">
+        <!-- Address -->
+        <android.support.design.widget.TextInputLayout
+            android:id="@+id/til_address"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content">
 
-        <android.support.design.widget.TextInputEditText
-            android:id="@+id/et_address"
-            android:layout_width="match_parent"
-            android:layout_height="wrap_content"
+            <android.support.design.widget.TextInputEditText
+                android:id="@+id/et_address"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:hint="@string/hint_street"
-            android:imeOptions="actionNext"
-            android:inputType="text"
-            android:nextFocusDown="@+id/et_description"
+                android:imeOptions="actionNext"
+                android:inputType="text"
+                android:nextFocusDown="@+id/et_description"
-            android:nextFocusForward="@id/et_description"
-            android:hint="@string/hint_street"/>
+                android:nextFocusForward="@id/et_description" />
-    </android.support.design.widget.TextInputLayout>
+        </android.support.design.widget.TextInputLayout>
 
-    <!-- Description -->
-    <android.support.design.widget.TextInputLayout
-        android:id="@+id/til_description"
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content">
+        <!-- Description -->
+        <android.support.design.widget.TextInputLayout
+            android:id="@+id/til_description"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content">
 
-        <android.support.design.widget.TextInputEditText
-            android:id="@+id/et_description"
-            android:layout_width="match_parent"
-            android:layout_height="wrap_content"
+            <android.support.design.widget.TextInputEditText
+                android:id="@+id/et_description"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:hint="@string/hint_description"
-            android:imeOptions="actionDone"
+                android:imeOptions="actionDone"
-            android:inputType="text"
-            android:hint="@string/hint_description"/>
+                android:inputType="text" />
-    </android.support.design.widget.TextInputLayout>
+        </android.support.design.widget.TextInputLayout>
 
-    <Button
-        android:id="@+id/btn_submit"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:layout_gravity="center"
+        <Button
+            android:id="@+id/btn_submit"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center"
-        android:text="@string/submit_button"/>
+            android:text="@string/submit_button" />
 
-</LinearLayout>
+    </LinearLayout>
+</ScrollView>
Index: majifix311/src/main/java/com/example/majifix311/location/MapDownloader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- majifix311/src/main/java/com/example/majifix311/location/MapDownloader.java	(revision )
+++ majifix311/src/main/java/com/example/majifix311/location/MapDownloader.java	(revision )
@@ -0,0 +1,90 @@
+//package com.example.majifix311.location;
+//
+//import android.content.Context;
+//import android.util.Log;
+//
+//import com.mapbox.mapboxsdk.geometry.LatLngBounds;
+//import com.mapbox.mapboxsdk.offline.OfflineManager;
+//import com.mapbox.mapboxsdk.offline.OfflineRegion;
+//import com.mapbox.mapboxsdk.offline.OfflineRegionError;
+//import com.mapbox.mapboxsdk.offline.OfflineRegionStatus;
+//import com.mapbox.mapboxsdk.offline.OfflineTilePyramidRegionDefinition;
+//
+//import org.json.JSONObject;
+//
+//import tz.co.codetanzania.R;
+//
+///**
+// * This is used for downloading Mapbox maps for offline use.
+// */
+//
+//public class MapDownloader implements OfflineManager.CreateOfflineRegionCallback, OfflineRegion.OfflineRegionObserver {
+//    private static final String JSON_FIELD_REGION_NAME = "region name";
+//    private static final String TAG = "MapDownloader";
+//
+//    public void downloadTilesForRegion(Context context, String regionName, LatLngBounds bounds) {
+//        // Define offline tiles and metadata
+//        OfflineTilePyramidRegionDefinition definition =
+//                new OfflineTilePyramidRegionDefinition(
+//                        context.getResources().getString(R.string.mapbox_style),
+//                        bounds, 10, 20, context.getResources().getDisplayMetrics().density);
+//        byte[] metadata = createMetadata(regionName);
+//
+//        // Use OfflineManager to download region
+//        OfflineManager offlineManager = OfflineManager.getInstance(context);
+//        offlineManager.createOfflineRegion(definition, metadata, this);
+//    }
+//
+//    private byte[] createMetadata(String regionName) {
+//        try {
+//            JSONObject jsonObject = new JSONObject();
+//            jsonObject.put(JSON_FIELD_REGION_NAME, regionName);
+//            String json = jsonObject.toString();
+//            return json.getBytes();
+//        } catch (Exception exception) {
+//            Log.e("MapboxBaseFragment",
+//                    "downloadTilesForRegion: Failed to encode metadata.", exception);
+//            return null;
+//        }
+//    }
+//
+//    // This is triggered on create
+//    @Override
+//    public void onCreate(OfflineRegion offlineRegion) {
+//        offlineRegion.setDownloadState(OfflineRegion.STATE_ACTIVE);
+//        offlineRegion.setObserver(this);
+//    }
+//
+//    // This is triggered if download fails
+//    @Override
+//    public void onError(String error) {
+//        Log.e(TAG, "Error: " + error);
+//    }
+//
+//    // This gives updates on download status
+//    @Override
+//    public void onStatusChanged(OfflineRegionStatus status) {
+//        double percentage = status.getRequiredResourceCount() >= 0
+//                ? (100.0 * status.getCompletedResourceCount() / status.getRequiredResourceCount())
+//                : 0.0;
+//        if (status.isComplete()) {
+//            Log.d(TAG, "onStatusChanged: Region downloaded Successfully");
+//        } else if (status.isRequiredResourceCountPrecise()) {
+//            Log.d(TAG, Double.toString(percentage));
+//        }
+//    }
+//
+//    // This is triggered if region download fails
+//    @Override
+//    public void onError(OfflineRegionError error) {
+//        Log.e(TAG, "onError: Region download failed. \n" +
+//                "Reason: "+error.getReason()+"\n" +
+//                "Message: "+error.getMessage());
+//    }
+//
+//    // This is triggered if mapbox doesn't have space
+//    @Override
+//    public void mapboxTileCountLimitExceeded(long limit) {
+//        Log.e(TAG, "Mapbox tile count limit exceeded: " + limit);
+//    }
+//}
Index: majifix311/src/main/java/com/example/majifix311/ui/SelectLocationFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- majifix311/src/main/java/com/example/majifix311/ui/SelectLocationFragment.java	(revision )
+++ majifix311/src/main/java/com/example/majifix311/ui/SelectLocationFragment.java	(revision )
@@ -0,0 +1,377 @@
+//package com.example.majifix311.ui;
+//
+//import android.Manifest;
+//import android.content.Context;
+//import android.content.Intent;
+//import android.content.pm.PackageManager;
+//import android.location.Location;
+//import android.os.Bundle;
+//import android.os.Handler;
+//import android.os.ResultReceiver;
+//import android.support.annotation.NonNull;
+//import android.support.annotation.Nullable;
+//import android.support.design.widget.FloatingActionButton;
+//import android.support.design.widget.TextInputEditText;
+//import android.support.v4.app.ActivityCompat;
+//import android.view.LayoutInflater;
+//import android.view.View;
+//import android.view.ViewGroup;
+//import android.widget.Button;
+//import android.widget.TextView;
+//import android.widget.Toast;
+//
+//import com.example.majifix311.R;
+//import com.example.majifix311.location.LocationTracker;
+//import com.mapbox.mapboxsdk.geometry.LatLng;
+//import com.mapbox.mapboxsdk.maps.MapboxMap;
+//import com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerPlugin;
+//
+//import static android.view.View.GONE;
+//import static android.view.View.VISIBLE;
+//import static com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerMode.TRACKING;
+//
+///**
+// * This creates a location fragment using Mapbox.
+// */
+//
+//public class SelectLocationFragment extends MapboxBaseFragment implements
+//        LocationTracker.LocationListener,
+//        //Callback<GeocodingResponse>,
+//        View.OnClickListener,
+//        View.OnFocusChangeListener,
+//        MapboxMap.OnMapLongClickListener {
+//
+//    private TextInputEditText mAddressView;
+//    private TextView mCoordinatesView;
+//    private FloatingActionButton mFabShowCurrent;
+//    private Button mSubmitButton;
+//    private Button mEditAddressButton;
+//
+//    private LocationTracker mLocationTracker;
+//    //private GeocoderAutoCompleteView mGeocoder;
+//    private LocationLayerPlugin mLocationLayer;
+//
+//    private LatLng mUserSelectedPoint;
+//    private String mAddress;
+//
+//    /**
+//     * The interface bridges communication between #SelectLocationFragment,
+//     * and the context where it is attached. The context must implement this
+//     * interface in order to receive location coordinates whenever necessary
+//     */
+//    private OnSelectLocation mSubmitListener;
+//
+//    public interface OnSelectLocation {
+//
+//        /**
+//         * Interface's only method. The callback is invoked when the current device's
+//         * location is approximated.
+//         */
+//        void selectLocation(double lats, double longs, String address);
+//
+//    }
+//
+//    @Override
+//    public void onAttach(Context ctx) {
+//        super.onAttach(ctx);
+//        try {
+//            mSubmitListener = (OnSelectLocation) ctx;
+//        } catch (ClassCastException cce) {
+//            throw new ClassCastException(ctx.toString() +
+//                    " must implement SelectLocationFragment#OnSelectLocation interface");
+//        }
+//    }
+//
+//    @Override
+//    protected int getFragLayoutId() {
+//        return R.layout.frag_location;
+//    }
+//    @Override
+//    protected int getMapViewId() {
+//        return R.id.mapView;
+//    }
+//
+//    @Nullable
+//    @Override
+//    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
+//        View rootView = super.onCreateView(inflater, container, savedInstanceState);
+//        if (rootView != null) {
+//
+//            mCoordinatesView = (TextView) rootView.findViewById(R.id.tv_Coordinates);
+//            mCoordinatesView.setText(R.string.default_coordinate_display);
+//
+//            mAddressView = (TextInputEditText) rootView.findViewById(R.id.tv_Address);
+//            mAddressView.setText(R.string.default_address_display);
+//            mAddressView.setOnFocusChangeListener(this);
+//
+//            mFabShowCurrent = (FloatingActionButton) rootView.findViewById(R.id.fab_PickLocation);
+//            mFabShowCurrent.setOnClickListener(this);
+//
+//            mSubmitButton = (Button) rootView.findViewById(R.id.btn_Next);
+//            mSubmitButton.setOnClickListener(this);
+//
+//            mEditAddressButton = (Button) rootView.findViewById(R.id.btn_ChangeAddress);
+//            mEditAddressButton.setOnClickListener(this);
+//
+//            //setupGeocoder(rootView);
+//        }
+//        return rootView;
+//    }
+//
+//    @Override
+//    public void onMapReady(MapboxMap mapboxMap) {
+//        super.onMapReady(mapboxMap);
+//
+//        // This limits map to city of Dar
+//        mapboxMap.setLatLngBoundsForCameraTarget(MapUtils.DAR_BOUNDS);
+//
+//        // This tracks users present location
+//        mLocationTracker = new LocationTracker(getActivity());
+//        mLocationTracker.start(this);
+//
+//        // This creates an overlay with a blue dot showing current location
+//        mLocationLayer = new LocationLayerPlugin(mMapView, mMapboxMap, mLocationEngine);
+//
+//        // User should be able to long click to select different location
+//        mMapboxMap.setOnMapLongClickListener(this);
+//    }
+//
+//    @Override
+//    public void onPause() {
+//        super.onPause();
+//
+//        // Location tracker must be released to avoid memory leaks
+//        if (mLocationTracker != null) {
+//            mLocationTracker.onPause();
+//        }
+//    }
+//
+//    @Override
+//    public void onDestroy() {
+//        super.onDestroy();
+//        // Geocoder must be released to avoid memory leaks
+////        if (mGeocoder != null) {
+////            mGeocoder.cancelApiCall();
+////        }
+//    }
+//
+//    // This ensures that GPS is turned on correctly
+//    @Override
+//    public void onActivityResult(int requestCode, int resultCode, Intent data) {
+//        if (mLocationTracker != null) {
+//            mLocationTracker.respondToActivityResult(requestCode, resultCode);
+//        }
+//    }
+//
+//    // This ensures that permission callbacks are handled correctly
+//    @Override
+//    public void onRequestPermissionsResult(int requestCode, @NonNull String permissions[], @NonNull int[] grantResults) {
+//        if (mLocationTracker != null) {
+//            mLocationTracker.respondToPermissions(requestCode, grantResults);
+//        }
+//    }
+//
+//    // This is the title of the dialog shown if permission needs to be requested
+//    @Override
+//    public String getPermissionAlertTitle() {
+//        return getString(R.string.location_permission_dialog_title);
+//    }
+//
+//    // This is the description of the dialog shown if permission needs to be requested
+//    @Override
+//    public String getPermissionAlertDescription() {
+//        return getString(R.string.location_permission_dialog_description);
+//    }
+//
+//    // This is called if turning on location permission or GPS is denied
+//    @Override
+//    public void onPermissionDenied() {
+//        Toast.makeText(getActivity(), R.string.location_permission_denied, Toast.LENGTH_LONG).show();
+//        getActivity().finish();
+//    }
+//
+//    // Callback for location tracker, noting changes in user location
+//    @Override
+//    public void onLocationChanged(Location location) {
+//        // Start location layer tracking
+//        if (mCurrentLocation == null
+//                && ActivityCompat.checkSelfPermission(getActivity(),
+//                Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED
+//                && ActivityCompat.checkSelfPermission(getActivity(),
+//                Manifest.permission.ACCESS_COARSE_LOCATION) == PackageManager.PERMISSION_GRANTED) {
+//            mLocationLayer.setLocationLayerEnabled(TRACKING);
+//        }
+//
+//        // Update current location
+//        mCurrentLocation = new LatLng(location.getLatitude(), location.getLongitude());
+//        if (mLocationLayer != null) {
+//            mLocationLayer.forceLocationUpdate(location);
+//        }
+//        // If no selected location, assume location is at user location
+//        if (mUserSelectedPoint == null) {
+//            updateIssueLocation(mCurrentLocation);
+//        }
+//    }
+//
+//    private void updateIssueLocation(LatLng location) {
+//        if (getActivity() == null) {
+//            return;
+//        }
+//        mCoordinatesView.setText(MapUtils.formatCoordinateString(getResources(), location));
+//        showIssueMarker(location);
+//
+//        // Uses reverse geocoding to get human readable location
+//        // Unfortunately: Mapbox at this time only returns sub-ward, not full address.
+//        //   findAddressWithMapbox(location.getLatitude(), location.getLongitude(), this);
+//        findAddressWithGoogle(location);
+//    }
+//
+//    private void showIssueAddress(String address) {
+//        if (address == null || address.isEmpty()
+//                || address.equals(mAddress)) {
+//            return;
+//        }
+//        // If different than previous address, save and display
+//        mAddress = address;
+//        mAddressView.setText(mAddress);
+//    }
+//
+//    private void showIssueMarker(LatLng location) {
+//        if (mMarker == null) {
+//            updateCamera();
+//            addMarker(location, R.string.location_marker_title, R.string.location_marker_description);
+//        } else {
+//            updateMarker(location, R.string.location_marker_title, R.string.location_marker_description);
+//        }
+//    }
+//
+//    private void switchToUseCurrentLocation() {
+//        // If necessary, remove user selected location
+//        if (mUserSelectedPoint != null) {
+//            mUserSelectedPoint = null;
+//            // Update fab bar color back to blue
+//            mFabShowCurrent.setImageResource(R.drawable.ic_location_searching_blue_24dp);
+//        }
+//        // Focus map back on current location
+//        updateCamera();
+//        // Update marker and address
+//        updateIssueLocation(mCurrentLocation);
+//    }
+//
+//    protected void findAddressWithGoogle(LatLng location) {
+//        if (mCurrentLocation == null) {
+//            return;
+//        }
+//        Intent intent = new Intent(getContext(), FetchAddressIntentService.class);
+//        intent.putExtra(FetchAddressIntentService.RECEIVER, new ResultReceiver(new Handler()) {
+//            @Override
+//            protected void onReceiveResult(int resultCode, Bundle resultData) {
+//                // here we receive the result
+//                if (mAddressView != null) {
+//                    showIssueAddress(resultData.getString(FetchAddressIntentService.RESULT_DATA_KEY));
+//                }
+//            }
+//        });
+//        intent.putExtra(FetchAddressIntentService.LOCATION_DATA_EXTRA, location);
+//        getActivity().startService(intent);
+//    }
+//
+//    @Override
+//    public void onFocusChange(View v, boolean hasFocus) {
+//        // For reasons of space, hide edit address button when selected
+//        if (v == mAddressView) {
+//            if (hasFocus) {
+//                mEditAddressButton.setVisibility(GONE);
+//            } else {
+//                mEditAddressButton.setVisibility(VISIBLE);
+//            }
+//        }
+//    }
+//
+//    @Override
+//    public void onMapLongClick(@NonNull LatLng point) {
+//        // Use clicked location as issue location
+//        mUserSelectedPoint = point;
+//        mFabShowCurrent.setImageResource(R.drawable.ic_location_searching_black_24dp);
+//        updateIssueLocation(point);
+//    }
+//
+//    @Override
+//    public void onClick(View v) {
+//        if (v == mSubmitButton) {
+//            // TODO Fetching address should not be tied to fragment
+//            if (mSubmitListener == null || mCurrentLocation == null /*|| mAddress == null */) {
+//                return;
+//            }
+//            // Get location coordinates
+//            double latitude;
+//            double longitude;
+//            if (mUserSelectedPoint == null) {
+//                latitude = mCurrentLocation.getLatitude();
+//                longitude = mCurrentLocation.getLongitude();
+//            } else {
+//                latitude = mUserSelectedPoint.getLatitude();
+//                longitude = mUserSelectedPoint.getLongitude();
+//            }
+//
+//            // Get location address from edit text in case changes have been made
+//            mAddress = mAddressView.getText().toString();
+//
+//            // Submit location to parent activity (or other listener)
+//            mSubmitListener.selectLocation(latitude, longitude, mAddress);
+//
+//        } else if (v == mEditAddressButton) {
+//            // Select address view and open keyboard
+//            mAddressView.setFocusableInTouchMode(true);
+//            mAddressView.requestFocus();
+//            Util.showSoftInputMethod(getActivity());
+//
+//        } else if (v == mFabShowCurrent) {
+//            switchToUseCurrentLocation();
+//        }
+//    }
+//
+//    //TODO use google maps geocoder
+////    private void setupGeocoder(View rootView) {
+////        mGeocoder = (GeocoderAutoCompleteView) rootView.findViewById(R.id.geoAutoCompleteWidget);
+////        mGeocoder.setAccessToken(Mapbox.getAccessToken());
+////        mGeocoder.setBbox(38.9813,-7.2,39.65,-6.45);
+////        mGeocoder.setTypes(new String[] {GeocodingCriteria.TYPE_COUNTRY ,
+////                GeocodingCriteria.TYPE_ADDRESS,
+////                GeocodingCriteria.TYPE_DISTRICT,
+////                GeocodingCriteria.TYPE_LOCALITY,
+////                GeocodingCriteria.TYPE_NEIGHBORHOOD,
+////                GeocodingCriteria.TYPE_PLACE,
+////                GeocodingCriteria.TYPE_POI,
+////                GeocodingCriteria.TYPE_POI_LANDMARK,
+////                GeocodingCriteria.TYPE_POSTCODE,
+////                GeocodingCriteria.TYPE_REGION});
+////        mGeocoder.setOnFeatureListener(new GeocoderAutoCompleteView.OnFeatureListener() {
+////            @Override
+////            public void onFeatureClick(CarmenFeature feature) {
+////                Position position = feature.asPosition();
+////                mUserSelectedPoint = new LatLng(position.getLatitude(), position.getLongitude());
+////                mAddressView.setText(mUserSelectedPoint.getLatitude() + ", " + mUserSelectedPoint.getLongitude());
+////
+////                updateCamera();
+////                addMarker(new LatLng(mUserSelectedPoint.getLatitude(), mUserSelectedPoint.getLongitude()));
+////            }
+////        });
+////    }
+//
+//    // NOTE: This is left here as a resource to those who come and look for the mapbox way
+//    // This is returned from mapbox geocoder to provide human readable location
+////    @Override
+////    public void onResponse(Call<GeocodingResponse> call, Response<GeocodingResponse> response) {
+////        List<CarmenFeature> results = response.body().getFeatures();
+////        if (results.size() > 0) {
+////            showIssueAddress(results.get(0).toString());
+////        }
+////    }
+////
+////    // This is returned when mapbox geocoder fails to provide human readable location
+////    @Override
+////    public void onFailure(Call<GeocodingResponse> call, Throwable t) {
+////        // do nothing
+////    }
+//}
Index: majifix311/src/main/res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- majifix311/src/main/res/values/strings.xml	(date 1505658913000)
+++ majifix311/src/main/res/values/strings.xml	(revision )
@@ -1,11 +1,14 @@
 <resources>
     <string name="app_name">majifix311</string>
+    <string name="mapbox_style" translatable="false">mapbox://styles/mapbox/streets-v10</string>
 
+
     <!--report issue form-->
     <string name="hint_name">Full name</string>
     <string name="hint_phone">Phone No: 255</string>
     <string name="hint_category">Category</string>
     <string name="hint_location">Add Location</string>
+    <string name="hint_finding_location">Finding Location</string>
     <string name="hint_photo">Add Photo</string>
     <string name="hint_ward">Ward</string>
     <string name="hint_street">Street</string>
Index: majifix311/src/main/res/layout/dialog_category_selector.xml
===================================================================
--- majifix311/src/main/res/layout/dialog_category_selector.xml	(date 1505658913000)
+++ majifix311/src/main/res/layout/dialog_category_selector.xml	(date 1505658913000)
@@ -1,52 +0,0 @@
-<?xml version="1.0" encoding="utf-8" ?>
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="match_parent"
-    android:layout_height="wrap_content"
-    android:background="#ffffff"
-    android:orientation="vertical"
-    android:padding="15dp">
-
-    <TextView
-        android:id="@+id/dialogTitle"
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content"
-        android:text="@string/action_select_category"
-        android:textSize="17sp"
-        android:textStyle="bold" />
-
-    <ListView
-        android:id="@+id/dialogList"
-        android:layout_width="match_parent"
-        android:layout_height="300dp"
-        android:divider="@color/separator"
-        android:dividerHeight="0.1dp" />
-
-    <RelativeLayout
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content"
-        android:orientation="horizontal">
-
-        <Button
-            android:id="@+id/select"
-            style="?android:attr/borderlessButtonStyle"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_alignParentEnd="true"
-            android:layout_centerVertical="true"
-            android:text="@string/action_select"
-            android:layout_alignParentRight="true" />
-
-        <Button
-            android:id="@+id/close"
-            style="?android:attr/borderlessButtonStyle"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_alignParentStart="true"
-            android:layout_alignParentLeft="true"
-            android:layout_toStartOf="@id/select"
-            android:layout_toLeftOf="@id/select"
-            android:layout_centerVertical="true"
-            android:text="@string/action_close" />
-
-    </RelativeLayout>
-</LinearLayout>
Index: app/src/main/res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/values/strings.xml	(date 1505658913000)
+++ app/src/main/res/values/strings.xml	(revision )
@@ -2,4 +2,5 @@
     <string name="app_name">SimpleMajifixApp</string>
     <string name="report_issue">Report</string>
     <string name="see_list">See List</string>
+
 </resources>
Index: majifix311/src/main/res/layout/activity_empty.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- majifix311/src/main/res/layout/activity_empty.xml	(revision )
+++ majifix311/src/main/res/layout/activity_empty.xml	(revision )
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/container"
+    android:orientation="vertical" android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+</LinearLayout>
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build.gradle	(date 1505658913000)
+++ app/build.gradle	(revision )
@@ -5,7 +5,7 @@
     buildToolsVersion "25.0.3"
     defaultConfig {
         applicationId "com.example.krtonga.simplemajifixapp"
-        minSdkVersion 11
+        minSdkVersion 15
         targetSdkVersion 25
         versionCode 1
         versionName "1.0"
Index: majifix311/src/main/java/com/example/majifix311/location/LocationTracker.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- majifix311/src/main/java/com/example/majifix311/location/LocationTracker.java	(revision )
+++ majifix311/src/main/java/com/example/majifix311/location/LocationTracker.java	(revision )
@@ -0,0 +1,246 @@
+package com.example.majifix311.location;
+
+import android.Manifest;
+import android.app.Activity;
+import android.content.DialogInterface;
+import android.content.IntentSender;
+import android.content.pm.PackageManager;
+import android.location.Location;
+import android.os.Build;
+import android.os.Bundle;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.support.v4.app.ActivityCompat;
+import android.support.v4.content.ContextCompat;
+import android.support.v7.app.AlertDialog;
+
+import com.google.android.gms.common.ConnectionResult;
+import com.google.android.gms.common.api.GoogleApiClient;
+import com.google.android.gms.common.api.PendingResult;
+import com.google.android.gms.common.api.ResultCallback;
+import com.google.android.gms.common.api.Status;
+import com.google.android.gms.location.LocationListener;
+import com.google.android.gms.location.LocationRequest;
+import com.google.android.gms.location.LocationServices;
+import com.google.android.gms.location.LocationSettingsRequest;
+import com.google.android.gms.location.LocationSettingsResult;
+import com.google.android.gms.location.LocationSettingsStates;
+import com.google.android.gms.location.LocationSettingsStatusCodes;
+
+/**
+ * This is used to contain GLS methods which are used to find current location.
+ *
+ * *** IMPORTANT ***
+ *
+ * To avoid memory leaks, do not forget to call myLocationTracker.onPause()
+ * in the onPause() Activity lifecycle method. EX:
+ *
+ *
+ *
+ * To ensure that permissions is updated correctly, override onRequestPermissionsResult(). EX:
+ *
+ *   @Override
+ *   public void onRequestPermissionsResult(int requestCode, String permissions[], int[] grantResults) {
+ *      mLocationTracker.respondToPermissions(requestCode, grantResults, this);
+ *   }
+ *
+ * To ensure that GPS is turned on correctly, override onActivityResult(). EX:
+ *
+ *  @Override
+ *  public void onActivityResult(int requestCode, int resultCode, Intent data) {
+ *      mLocationTracker.respondToActivityResult(requestCode, resultCode);
+ *  }
+ */
+
+public class LocationTracker implements
+        GoogleApiClient.ConnectionCallbacks,
+        GoogleApiClient.OnConnectionFailedListener,
+        LocationListener {
+    private static final int MY_PERMISSIONS_REQUEST_LOCATION = 99;
+
+    private Activity mActivity;
+    private GoogleApiClient mGoogleApiClient;
+    private LocationListener mChangeListener;
+    private LocationRequest mLocationRequest;
+
+    public LocationTracker(Activity activity) {
+        mActivity = activity;
+    }
+
+    public void start(LocationListener listener) {
+        mChangeListener = listener;
+
+        // In newest APIs user might manually turn location permission off for this app
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
+            if (appHasLocationPermission()) {
+                buildGoogleApiClient();
+            } else {
+                askForLocationPermission();
+            }
+        }
+        // In previous APIs permissions are asked for on install
+        else {
+            buildGoogleApiClient();
+        }
+    }
+
+    // This must be called in Activity onPause() to avoid memory leaks.
+    public void onPause() {
+        if (mGoogleApiClient != null && mGoogleApiClient.isConnected()) {
+            LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
+        }
+    }
+
+    // This is triggered when user attempted to start a LocationTracker when GPS was off
+    public void respondToActivityResult(int requestCode, int resultCode) {
+        if (requestCode == MY_PERMISSIONS_REQUEST_LOCATION) {
+            onPermissionsChange(resultCode == Activity.RESULT_OK);
+        }
+    }
+
+    // This is triggered when user attempted to start a LocationTracker when location permission
+    // has not been granted to the application
+    public void respondToPermissions(int requestCode, int[] grantResults) {
+        if (requestCode == MY_PERMISSIONS_REQUEST_LOCATION) {
+            onPermissionsChange(grantResults.length > 0
+                    && grantResults[0] == PackageManager.PERMISSION_GRANTED);
+        }
+    }
+
+    private boolean appHasLocationPermission() {
+        return ContextCompat.checkSelfPermission(mActivity,
+                Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED;
+    }
+
+    private synchronized void buildGoogleApiClient() {
+        mGoogleApiClient = new GoogleApiClient.Builder(mActivity)
+                .addConnectionCallbacks(this)
+                .addOnConnectionFailedListener(this)
+                .addApi(LocationServices.API)
+                .build();
+        mGoogleApiClient.connect();
+    }
+
+    private LocationRequest createLocationRequest() {
+        LocationRequest mLocationRequest = new LocationRequest();
+        mLocationRequest.setInterval(10000);
+        mLocationRequest.setFastestInterval(5000);
+        mLocationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
+        return mLocationRequest;
+    }
+
+    // This is called when GoogleApiClient connects
+    @Override
+    public void onConnected(@Nullable Bundle bundle) {
+        mLocationRequest = createLocationRequest();
+
+        // For our purposes, we require that GPS is turned on. The following checks if GPS is on,
+        // and if not presently enabled prompts the user
+        LocationSettingsRequest.Builder builder = new LocationSettingsRequest.Builder()
+                .addLocationRequest(mLocationRequest);
+        builder.setAlwaysShow(true);
+        PendingResult<LocationSettingsResult> result = LocationServices.SettingsApi
+                .checkLocationSettings(mGoogleApiClient, builder.build());
+        result.setResultCallback(new ResultCallback<LocationSettingsResult>() {
+            @Override
+            public void onResult(@NonNull LocationSettingsResult locationSettingsResult) {
+                final Status status = locationSettingsResult.getStatus();
+                final LocationSettingsStates state = locationSettingsResult.getLocationSettingsStates();
+                switch (status.getStatusCode()) {
+                    case LocationSettingsStatusCodes.SUCCESS:
+                        // All location settings are satisfied. The client can initialize location requests here.
+                        requestLocationUpdates();
+                        break;
+                    case LocationSettingsStatusCodes.RESOLUTION_REQUIRED:
+                        // Location settings are not satisfied. But could be fixed by showing the user a dialog.
+                        try {
+                            // NOTE: Parent Activity & Fragment must override onActivityResult().
+                            status.startResolutionForResult(mActivity, MY_PERMISSIONS_REQUEST_LOCATION);
+                        } catch (IntentSender.SendIntentException e) {
+                            // Ignore the error.
+                        }
+                        break;
+                    case LocationSettingsStatusCodes.SETTINGS_CHANGE_UNAVAILABLE:
+                        // Location settings are not satisfied. However, we have no way to fix it.
+                        break;
+                }
+            }
+        });
+    }
+
+    private void requestLocationUpdates() {
+        if (ContextCompat.checkSelfPermission(mActivity,
+                Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {
+            LocationServices.FusedLocationApi.requestLocationUpdates(
+                    mGoogleApiClient, mLocationRequest, this);
+            System.out.println("Last location: "+LocationServices.FusedLocationApi.getLastLocation(mGoogleApiClient));
+        }
+    }
+
+    @Override
+    public void onConnectionSuspended(int i) {}
+
+    @Override
+    public void onConnectionFailed(@NonNull ConnectionResult connectionResult) {}
+
+    private void askForLocationPermission() {
+        if (!appHasLocationPermission()) {
+            if (ActivityCompat.shouldShowRequestPermissionRationale(mActivity, Manifest.permission.ACCESS_FINE_LOCATION)
+                    && mChangeListener.getPermissionAlertTitle() != null) {
+                // Show an explanation to the user *asynchronously* -- don't block
+                // this thread waiting for the user's response! After the user
+                // sees the explanation, try again to request the permission.
+                new AlertDialog.Builder(mActivity)
+                        .setTitle(mChangeListener.getPermissionAlertTitle())
+                        .setMessage(mChangeListener.getPermissionAlertDescription())
+                        .setPositiveButton("OK", new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialogInterface, int i) {
+                                //Prompt the user once explanation has been shown
+                                ActivityCompat.requestPermissions(mActivity,
+                                        new String[]{Manifest.permission.ACCESS_FINE_LOCATION},
+                                        MY_PERMISSIONS_REQUEST_LOCATION);
+                            }
+                        })
+                        .create()
+                        .show();
+            } else {
+                // No explanation needed, we can request the permission.
+                ActivityCompat.requestPermissions(mActivity,
+                        new String[]{Manifest.permission.ACCESS_FINE_LOCATION},
+                        MY_PERMISSIONS_REQUEST_LOCATION );
+            }
+        }
+    }
+
+    private void onPermissionsChange(boolean granted) {
+        if (granted) {
+            if (appHasLocationPermission()) {
+                if (mGoogleApiClient == null) {
+                    buildGoogleApiClient();
+                } else {
+                    requestLocationUpdates();
+                }
+            }
+        } else {
+            if (mChangeListener != null) {
+                mChangeListener.onPermissionDenied();
+            }
+        }
+    }
+
+    @Override
+    public void onLocationChanged(Location location) {
+        System.out.println("OnLocationChanged! "+location);
+        if (mChangeListener != null) {
+            mChangeListener.onLocationChanged(location);
+        }
+    }
+
+    public interface LocationListener {
+        String getPermissionAlertTitle();
+        String getPermissionAlertDescription();
+        void onLocationChanged(Location location);
+        void onPermissionDenied();
+    }
+}
Index: majifix311/src/main/java/com/example/majifix311/ui/ReportProblemActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- majifix311/src/main/java/com/example/majifix311/ui/ReportProblemActivity.java	(date 1505658913000)
+++ majifix311/src/main/java/com/example/majifix311/ui/ReportProblemActivity.java	(revision )
@@ -3,6 +3,7 @@
 import android.app.Dialog;
 import android.content.BroadcastReceiver;
 import android.content.Context;
+import android.content.DialogInterface;
 import android.content.Intent;
 import android.content.IntentFilter;
 import android.location.Location;
@@ -25,6 +26,7 @@
 import android.widget.Toast;
 
 import com.example.majifix311.EventHandler;
+import com.example.majifix311.LocationPickerDialog;
 import com.example.majifix311.Problem;
 import com.example.majifix311.R;
 import com.example.majifix311.api.ReportService;
@@ -47,6 +49,7 @@
 
     private String[] mCategories;
     private CategoryPickerDialog mCategoryDialog;
+    private LocationPickerDialog mLocationDialog;
 
     private TextInputLayout mTilName;
     private TextInputLayout mTilNumber;
@@ -99,9 +102,10 @@
         mEtDescription.addTextChangedListener(new EmptyErrorTrigger(mTilDescription));
 
         // add click listeners
+        setupCategoryPicker();
+        setupLocationPicker();
         mSubmitButton = (Button) findViewById(R.id.btn_submit);
         mSubmitButton.setOnClickListener(this);
-        setupCategoryPicker();
 
         // initialize problem builder
         mBuilder = new Problem.Builder(this);
@@ -134,17 +138,30 @@
         });
     }
 
+    private void setupLocationPicker() {
+        mLlLocation.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                createLocationPickerDialog();
+            }
+        });
+    }
+
+    private void createLocationPickerDialog() {
+        if (mLocationDialog == null) {
+            System.out.println("...Location Dialog was null...");
+            mLocationDialog = new LocationPickerDialog();
+        }
+        mLocationDialog.show(getFragmentManager(), "location_dialog");
+    }
+
     private void createCategoryPickerDialog(String[] categories) {
         if (mCategoryDialog == null) {
             System.out.println("...Category Dialog was null...");
-            // creates new dialog
             mCategoryDialog = CategoryPickerDialog.newInstance(categories);
-
-            // registers activity to receive input from dialog
             mCategoryDialog.setListener(this);
         }
-        // shows dialog
-        mCategoryDialog.show(getFragmentManager(), "dialog");
+        mCategoryDialog.show(getFragmentManager(), "category_dialog");
     }
 
     private void registerForPostUpdates() {
Index: majifix311/src/main/res/layout/dialog_location_selector.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- majifix311/src/main/res/layout/dialog_location_selector.xml	(revision )
+++ majifix311/src/main/res/layout/dialog_location_selector.xml	(revision )
@@ -0,0 +1,46 @@
+<?xml version="1.0" encoding="utf-8" ?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:background="#ffffff"
+    android:orientation="vertical"
+    android:padding="15dp">
+
+    <ProgressBar
+        android:id="@+id/waiting_for_location"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:visibility="gone"/>
+
+    <TextView
+        android:id="@+id/address"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:visibility="gone"/>
+
+    <TextView
+        android:id="@+id/gps"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:visibility="gone"/>
+
+    <RadioGroup
+        android:id="@+id/location_options"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content">
+
+        <RadioButton
+            android:id="@+id/location_current"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="Use My Current Location" />
+
+        <RadioButton
+            android:id="@+id/location_custom"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="Select Custom Location" />
+
+    </RadioGroup>
+
+</LinearLayout>
Index: majifix311/src/main/res/layout/map_dar.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- majifix311/src/main/res/layout/map_dar.xml	(revision )
+++ majifix311/src/main/res/layout/map_dar.xml	(revision )
@@ -0,0 +1,15 @@
+<?xml version="1.0" encoding="utf-8"?>
+<merge xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:mapbox="http://schemas.android.com/apk/res-auto">
+
+    <!--<com.mapbox.mapboxsdk.maps.MapView-->
+        <!--android:id="@+id/mapView"-->
+        <!--android:layout_width="match_parent"-->
+        <!--android:layout_height="match_parent"-->
+        <!--mapbox:mapbox_cameraTargetLat="-6.799156"-->
+        <!--mapbox:mapbox_cameraTargetLng="39.258505"-->
+        <!--mapbox:mapbox_styleUrl="@string/mapbox_style"-->
+        <!--mapbox:mapbox_cameraZoom="10"/>-->
+
+    <!--&lt;!&ndash; TODO Target should be passed in &ndash;&gt;-->
+</merge>
Index: majifix311/src/main/res/drawable/ic_location_searching_blue_24dp.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- majifix311/src/main/res/drawable/ic_location_searching_blue_24dp.xml	(revision )
+++ majifix311/src/main/res/drawable/ic_location_searching_blue_24dp.xml	(revision )
@@ -0,0 +1,9 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+        android:width="24dp"
+        android:height="24dp"
+        android:viewportWidth="24.0"
+        android:viewportHeight="24.0">
+    <path
+        android:fillColor="#FFFFFF"
+        android:pathData="M20.94,11c-0.46,-4.17 -3.77,-7.48 -7.94,-7.94V1h-2v2.06C6.83,3.52 3.52,6.83 3.06,11H1v2h2.06c0.46,4.17 3.77,7.48 7.94,7.94V23h2v-2.06c4.17,-0.46 7.48,-3.77 7.94,-7.94H23v-2h-2.06zM12,19c-3.87,0 -7,-3.13 -7,-7s3.13,-7 7,-7 7,3.13 7,7 -3.13,7 -7,7z"/>
+</vector>
Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build.gradle	(date 1505658913000)
+++ build.gradle	(revision )
@@ -15,6 +15,7 @@
 allprojects {
     repositories {
         jcenter()
+        maven { url 'https://maven.google.com' } // required for mapping dependencies
     }
 }
 
Index: majifix311/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- majifix311/build.gradle	(date 1505658913000)
+++ majifix311/build.gradle	(revision )
@@ -5,12 +5,13 @@
     buildToolsVersion "25.0.3"
 
     defaultConfig {
-        minSdkVersion 11
+        minSdkVersion 15
         targetSdkVersion 25
         versionCode 1
         versionName "1.0"
 
         testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
+        vectorDrawables.useSupportLibrary = true
 
         buildConfigField("String", "END_POINT", "\"http://dawasco.herokuapp.com\"")
     }
@@ -29,12 +30,23 @@
     testCompile 'org.robolectric:robolectric:3.4.2'
     testCompile 'com.squareup.okhttp3:mockwebserver:3.9.0'
 
+    // views
     compile 'com.android.support:appcompat-v7:25.3.1'
     compile 'com.android.support:design:25.3.1'
     compile 'com.android.support.constraint:constraint-layout:1.0.2'
 
+    // networking
     compile 'io.reactivex.rxjava2:rxandroid:2.0.1'
     compile 'io.reactivex.rxjava2:rxjava:2.0.2'
     compile 'com.squareup.retrofit2:converter-gson:2.1.0'
     compile 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'
+
+    // location
+//    compile 'com.google.android.gms:play-services:11.2.2'
+//    compile 'com.google.android.gms:play-services:10.0.0' // 10.2 removed map and location support for api 11
+    compile 'com.google.android.gms:play-services-location:11.0.4'
+    compile 'com.google.android.gms:play-services-maps:11.0.4'
+    compile('com.mapbox.mapboxsdk:mapbox-android-sdk:5.1.2@aar') { transitive=true }
+    compile('com.mapbox.mapboxsdk:mapbox-android-services:2.2.0@aar') { transitive=true }
+    compile 'com.mapbox.mapboxsdk:mapbox-android-plugin-locationlayer:0.1.0'
 }
Index: majifix311/src/main/res/layout/frag_location.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- majifix311/src/main/res/layout/frag_location.xml	(revision )
+++ majifix311/src/main/res/layout/frag_location.xml	(revision )
@@ -0,0 +1,84 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:layout_height="match_parent"
+    android:layout_width="match_parent"
+    android:orientation="vertical" >
+
+    <!--<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"-->
+        <!--android:layout_width="match_parent"-->
+        <!--android:layout_height="0dp"-->
+        <!--android:layout_weight="1"-->
+        <!--xmlns:app="http://schemas.android.com/apk/res-auto">-->
+
+        <!--<include layout="@layout/map_dar" />-->
+
+        <!--<android.support.design.widget.FloatingActionButton-->
+            <!--android:id="@+id/fab_PickLocation"-->
+            <!--android:layout_width="wrap_content"-->
+            <!--android:layout_height="wrap_content"-->
+            <!--app:backgroundTint="@android:color/white"-->
+            <!--app:srcCompat="@drawable/ic_location_searching_blue_24dp"-->
+            <!--android:layout_marginEnd="16dp"-->
+            <!--android:layout_marginBottom="16dp"-->
+            <!--android:layout_alignParentBottom="true"-->
+            <!--android:layout_alignParentEnd="true"-->
+            <!--app:fabSize="normal"/>-->
+    <!--</RelativeLayout>-->
+
+    <!--<LinearLayout-->
+        <!--android:id="@+id/ll_BottomLocationBar"-->
+        <!--android:layout_width="match_parent"-->
+        <!--android:layout_height="wrap_content"-->
+        <!--android:orientation="vertical"-->
+        <!--android:background="@android:color/white"-->
+        <!--android:layout_gravity="bottom"-->
+        <!--android:layout_margin="@dimen/activity_horizontal_margin">-->
+
+        <!--<TextView-->
+            <!--android:layout_width="wrap_content"-->
+            <!--android:layout_height="wrap_content"-->
+            <!--android:text="@string/label_location_selector"/>-->
+
+        <!--<android.support.design.widget.TextInputEditText-->
+            <!--android:id="@+id/tv_Address"-->
+            <!--style="@style/TextAppearance.AppCompat.Medium"-->
+            <!--android:layout_width="match_parent"-->
+            <!--android:layout_height="wrap_content" />-->
+
+        <!--<TextView-->
+            <!--android:id="@+id/tv_Coordinates"-->
+            <!--android:textColor="@color/colorHeavyGray"-->
+            <!--android:layout_width="wrap_content"-->
+            <!--android:layout_height="wrap_content"/>-->
+
+
+        <!--<Button-->
+            <!--android:id="@+id/btn_Next"-->
+            <!--style="@style/IntroButton"-->
+            <!--android:layout_width="wrap_content"-->
+            <!--android:layout_height="wrap_content"-->
+            <!--android:text="@string/use_location"-->
+            <!--android:layout_gravity="center"-->
+            <!--android:drawableEnd="@drawable/ic_chevron_right_accent_24dp_wrapper"/>-->
+
+        <!--<Button-->
+            <!--android:id="@+id/btn_ChangeAddress"-->
+            <!--style="@style/IntroButton"-->
+            <!--android:layout_width="wrap_content"-->
+            <!--android:layout_height="wrap_content"-->
+            <!--android:text="@string/change_address"-->
+            <!--android:layout_gravity="center"-->
+            <!--android:drawableEnd="@drawable/ic_chevron_right_accent_24dp_wrapper"/>-->
+
+        <!--&lt;!&ndash;<Button&ndash;&gt;-->
+            <!--&lt;!&ndash;android:id="@id/btn_Next"&ndash;&gt;-->
+            <!--&lt;!&ndash;style="@style/IntroButton"&ndash;&gt;-->
+            <!--&lt;!&ndash;android:layout_width="wrap_content"&ndash;&gt;-->
+            <!--&lt;!&ndash;android:layout_height="wrap_content"&ndash;&gt;-->
+            <!--&lt;!&ndash;android:text="Why do we need this information?"&ndash;&gt;-->
+            <!--&lt;!&ndash;android:layout_gravity="center"&ndash;&gt;-->
+            <!--&lt;!&ndash;android:drawableEnd="@drawable/ic_chevron_right_accent_24dp_wrapper"/>&ndash;&gt;-->
+
+    <!--</LinearLayout>-->
+</LinearLayout>
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/misc.xml	(date 1505658913000)
+++ .idea/misc.xml	(revision )
@@ -68,7 +68,7 @@
     <ConfirmationsSetting value="0" id="Add" />
     <ConfirmationsSetting value="0" id="Remove" />
   </component>
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_7" default="true" assert-keyword="true" jdk-15="true" project-jdk-name="JDK" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" default="true" assert-keyword="true" jdk-15="true" project-jdk-name="JDK" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/build/classes" />
   </component>
   <component name="ProjectType">
\ No newline at end of file
Index: majifix311/src/main/res/drawable/ic_location_searching_black_24dp.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- majifix311/src/main/res/drawable/ic_location_searching_black_24dp.xml	(revision )
+++ majifix311/src/main/res/drawable/ic_location_searching_black_24dp.xml	(revision )
@@ -0,0 +1,9 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+        android:width="24dp"
+        android:height="24dp"
+        android:viewportWidth="24.0"
+        android:viewportHeight="24.0">
+    <path
+        android:fillColor="#FF000000"
+        android:pathData="M20.94,11c-0.46,-4.17 -3.77,-7.48 -7.94,-7.94V1h-2v2.06C6.83,3.52 3.52,6.83 3.06,11H1v2h2.06c0.46,4.17 3.77,7.48 7.94,7.94V23h2v-2.06c4.17,-0.46 7.48,-3.77 7.94,-7.94H23v-2h-2.06zM12,19c-3.87,0 -7,-3.13 -7,-7s3.13,-7 7,-7 7,3.13 7,7 -3.13,7 -7,7z"/>
+</vector>
Index: majifix311/src/main/java/com/example/majifix311/ui/MapboxBaseFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- majifix311/src/main/java/com/example/majifix311/ui/MapboxBaseFragment.java	(revision )
+++ majifix311/src/main/java/com/example/majifix311/ui/MapboxBaseFragment.java	(revision )
@@ -0,0 +1,230 @@
+package com.example.majifix311.ui;
+
+import android.os.Bundle;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.support.v4.app.Fragment;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+
+import com.mapbox.mapboxsdk.Mapbox;
+import com.mapbox.mapboxsdk.annotations.MarkerOptions;
+import com.mapbox.mapboxsdk.camera.CameraPosition;
+import com.mapbox.mapboxsdk.camera.CameraUpdateFactory;
+import com.mapbox.mapboxsdk.geometry.LatLng;
+import com.mapbox.mapboxsdk.maps.MapView;
+import com.mapbox.mapboxsdk.maps.MapboxMap;
+import com.mapbox.mapboxsdk.maps.OnMapReadyCallback;
+import com.mapbox.services.android.telemetry.location.LocationEngine;
+import com.mapbox.services.api.geocoding.v5.MapboxGeocoding;
+
+/**
+ * This should be used as a base fragment for fragments that wish to use
+ * a mapbox view.
+ */
+
+public abstract class MapboxBaseFragment extends Fragment implements
+        OnMapReadyCallback {
+
+    private final String accessToken = "pk.eyJ1Ijoia3J0b25nYSIsImEiOiJjajV2ZzAzcDMwMXhlMnFwNGNvZXBucDFsIn0.BxafRKx6aBYMFC-R8x_xkw";
+
+    protected MapView mMapView;
+    protected MapboxMap mMapboxMap;
+    protected MapboxGeocoding mGeocoder;
+//    protected PermissionsManager mPermissionsGuru;
+    protected LocationEngine mLocationEngine;
+    protected MarkerOptions mMarker;
+    protected LatLng mCurrentLocation;
+
+    private boolean mLocationFoundPreviously;
+
+    protected abstract int getFragLayoutId();
+
+    protected abstract int getMapViewId();
+
+    @Nullable
+    @Override
+    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
+        Mapbox.getInstance(getContext(), accessToken);
+        View rootView = inflater.inflate(getFragLayoutId(), container, false);
+
+        mMapView = (MapView) rootView.findViewById(getMapViewId());
+        mMapView.onCreate(savedInstanceState);
+        mMapView.getMapAsync(this);
+
+        return rootView;
+    }
+
+    @Override
+    public void onStart() {
+        super.onStart();
+        mMapView.onStart();
+//        if (mLocationEngine != null
+//                && ActivityCompat.checkSelfPermission(getContext(),
+//                  Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED
+//                && ActivityCompat.checkSelfPermission(getContext(),
+//                  Manifest.permission.ACCESS_COARSE_LOCATION) == PackageManager.PERMISSION_GRANTED) {
+//            mLocationEngine.requestLocationUpdates();
+//        }
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        mMapView.onResume();
+    }
+
+    @Override
+    public void onPause() {
+        super.onPause();
+        mMapView.onPause();
+    }
+
+    @Override
+    public void onStop() {
+        super.onStop();
+        mMapView.onStop();
+//        if (mLocationEngine != null) {
+//            mLocationEngine.removeLocationUpdates();
+//        }
+    }
+
+    @Override
+    public void onLowMemory() {
+        super.onLowMemory();
+        mMapView.onLowMemory();
+    }
+
+    @Override
+    public void onDestroy() {
+        super.onDestroy();
+        mMapView.onDestroy();
+        if (mGeocoder != null) {
+            mGeocoder.cancelCall();
+        }
+    }
+
+    @Override
+    public void onSaveInstanceState(Bundle outState) {
+        super.onSaveInstanceState(outState);
+        mMapView.onSaveInstanceState(outState);
+    }
+
+    @Override
+    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
+        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
+//        if (mPermissionsGuru != null) {
+//            mPermissionsGuru.onRequestPermissionsResult(requestCode, permissions, grantResults);
+//        }
+    }
+
+    protected void updateCamera() {
+        mMapView.setCameraDistance(10);
+        CameraPosition position;
+        if (mLocationFoundPreviously) {
+            position = new CameraPosition.Builder()
+                    .target(mCurrentLocation) // Sets the new camera position
+                    .build(); // Creates a CameraPosition from the builder
+        }
+        else {
+            mLocationFoundPreviously = true;
+            position = new CameraPosition.Builder()
+                    .target(mCurrentLocation) // Sets the new camera position
+                    .zoom(15) // Sets the zoom
+                    //.bearing(180) // Rotate the camera
+                    //.tilt(30) // Set the camera tilt
+                    .build(); // Creates a CameraPosition from the builder
+        }
+
+        mMapboxMap.animateCamera(CameraUpdateFactory
+                .newCameraPosition(position), 7000);
+    }
+
+    protected void addMarker(LatLng location) {
+        mMarker = new MarkerOptions()
+                .position(location);
+        mMapboxMap.addMarker(mMarker);
+    }
+
+    protected void addMarker(LatLng location, Integer titleResId, Integer snippetResId) {
+        mMarker = new MarkerOptions()
+                .position(location)
+                .title(getString(titleResId))
+                .snippet(getString(snippetResId));
+        mMapboxMap.addMarker(mMarker);
+    }
+
+    protected void updateMarker(LatLng location) {
+        mMapboxMap.clear();
+        addMarker(location);
+    }
+
+    protected void updateMarker(LatLng location, Integer titleResId, Integer snippetResId) {
+        mMapboxMap.clear();
+        addMarker(location, titleResId, snippetResId);
+    }
+
+    @Override
+    public void onMapReady(MapboxMap mapboxMap) {
+        mMapboxMap = mapboxMap;
+    }
+
+//    TODO: Check permissions using Mapbox
+//    protected void checkPermissions(PermissionsListener listener) {
+//        mPermissionsGuru = new PermissionsManager(listener);
+//        if (!mPermissionsGuru.areLocationPermissionsGranted(getContext())) {
+//            mPermissionsGuru.requestLocationPermissions(getActivity());
+//        }
+//    }
+//    TODO: Get location updates with Mapbox
+//    protected void getLocationUpdates() {
+//        mLocationEngine = LostLocationEngine.getLocationEngine(getContext());
+//        mLocationEngine.activate();
+//        mLocationEngine.addLocationEngineListener(new LocationEngineListener() {
+//            @Override
+//            public void onConnected() {
+//                if (ActivityCompat.checkSelfPermission(getContext(),
+//                        Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED
+//                        && ActivityCompat.checkSelfPermission(getContext(),
+//                        Manifest.permission.ACCESS_COARSE_LOCATION) == PackageManager.PERMISSION_GRANTED) {
+//                    mLocationEngine.requestLocationUpdates();
+//                }
+//            }
+//
+//            @Override
+//            public void onLocationChanged(Location location) {
+//                onChanged(location);
+//            }
+//        });
+//    }
+//
+//    protected void onChanged(Location location) {
+//
+//    }
+
+//    TODO: Figure out how to improve mapbox geocoding for dar es salaam. At present only returns subward
+//    public void findCoordinates(String query, Callback<GeocodingResponse> listener) {
+//        if (mGeocoder != null) {
+//            mGeocoder.cancelCall();
+//        }
+//        mGeocoder = new MapboxGeocoding.Builder()
+//                .setAccessToken(Mapbox.getAccessToken())
+//                .setLocation(query)
+//                .build();
+//
+//        mGeocoder.enqueueCall(listener);
+//    }
+//
+//    protected void findAddressWithMapbox(double lat, double lng, Callback<GeocodingResponse> listener) {
+//        if (mGeocoder != null) {
+//            mGeocoder.cancelCall();
+//        }
+//        mGeocoder = new MapboxGeocoding.Builder<>()
+//                .setAccessToken(Mapbox.getAccessToken())
+//                .setCoordinates(Position.fromCoordinates(lng, lat))
+//                .build();
+//
+//        mGeocoder.enqueueCall(listener);
+//    }
+}
Index: majifix311/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- majifix311/src/main/AndroidManifest.xml	(date 1505658913000)
+++ majifix311/src/main/AndroidManifest.xml	(revision )
@@ -2,6 +2,8 @@
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     package="com.example.majifix311">
 
+    <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
+    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
     <uses-permission android:name="android.permission.INTERNET" />
 
     <application
